import { NextRequest, NextResponse } from "next/server";
import { Telegraf, Markup } from "telegraf";

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN!);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤—ã–±–æ—Ä–æ–º –º–æ–π–∫–∏
bot.start((ctx) => {
    ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–π–∫—É:",
        Markup.inlineKeyboard([
            [Markup.button.callback("–ú–æ–π–∫–∞ 1", "wash_1")],
            [Markup.button.callback("–ú–æ–π–∫–∞ 2", "wash_2")],
            [Markup.button.callback("–ú–æ–π–∫–∞ 3", "wash_3")]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–π–∫–∏
bot.action(/wash_\d/, (ctx) => {
    const washId = ctx.match[0]; // wash_1, wash_2 –∏ —Ç.–¥.
    ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${washId}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`,
        Markup.inlineKeyboard([
            [Markup.button.callback("10:00", "time_10")],
            [Markup.button.callback("11:00", "time_11")],
            [Markup.button.callback("12:00", "time_12")]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
bot.action(/time_\d+/, (ctx) => {
    const time = ctx.match[0]; // time_10, time_11 –∏ —Ç.–¥.
    ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ${time}. –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ`);
});

// POST ‚Äî Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã —Å—é–¥–∞
export async function POST(req: NextRequest) {
    try {
        const body = await req.json();
        await bot.handleUpdate(body);
        return NextResponse.json({ ok: true });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ webhook:", err);
        return NextResponse.json({ ok: false, error: err });
    }
}

// GET ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API
export async function GET() {
    return NextResponse.json({ status: "bot is running" });
}